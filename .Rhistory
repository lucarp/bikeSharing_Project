install.packages(c("expsmooth", "fpp", "imputeTS", "smooth", "TTR"))
library(ggplot2)
library(expsmooth)
library(fpp)
library(smooth)
library("TTR") ## Teacher's recommendation
library(imputeTS)
hours = read.csv("project/dataset/hour.csv")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(expsmooth)
library(fpp)
library(smooth)
library("TTR") ## Teacher's recommendation
library(imputeTS)
#hours = read.csv("project/dataset/hour.csv")
#days = read.csv("project/dataset/day.csv")
hours = read.csv("./dataset/hour.csv")
days = read.csv("./dataset/day.csv")
head(hours)
# Converting datatype
days$dteday<-as.Date(days$dteday)
days$season<-as.factor(days$season)
days$weekday<-as.factor(days$weekday)
days$holiday<-as.factor(days$holiday)
sapply(days,class)
hours$dteday<-as.Date(dayhourss$dteday)
hours$season<-as.factor(hours$season)
hours$weekday<-as.factor(hours$weekday)
hours$holiday<-as.factor(hours$holiday)
## Mean and median temperature by season
# How do the temperatures change across the seasons?
# What are the mean and median temperatures?
aggregate(days$temp~days$season, FUN= function(x) c(mean = mean(x), median = median(x)))
boxplot(days$temp~days$season, xlab="Seasons", ylab="Temperature")
cor(days[, c("temp", "atemp", "cnt", "casual", "registered" )])
### Means per month
cbind(aggregate(days$temp~days$mnth + days$yr, FUN= mean),
aggregate(days$atemp~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$hum~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$windspeed~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$cnt~days$mnth + days$yr, FUN= mean)[3])
## Correlation between temperature and bike rentals
# Is there a correlation between the temp/atemp/mean.temp.atemp and
# the total count of bike rentals?
cor(hours[c("temp", "casual", "registered")])
plot(days$dteday, days$cnt, type="l")
?boxplot
smoothed = holt(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)))
## Using library 'smooth'
es(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), h=18, holdout=TRUE, silent=FALSE)
# Using library TTR
smoothed = SMA(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), n=7)
p = ggplot() +
geom_line(data = days, aes(x = days$dteday, y = days$cnt), color = "lightblue") +
geom_line(data = days, aes(x = days$dteday, y = smoothed), color = "red") +
xlab('Dates') +
ylab('Number of rentals')
print(p)
# Plot the cnt vs dteday and examine its patterns and irregularities
plot(days$dteday, days$cnt, type="l")
smoothed = holt(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)))
# Smooth your time series and compare with the origina
## Using library 'smooth'
es(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), h=18, holdout=TRUE, silent=FALSE)
# Using library TTR
smoothed = SMA(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), n=7)
p = ggplot() +
geom_line(data = days, aes(x = days$dteday, y = days$cnt), color = "lightblue") +
geom_line(data = days, aes(x = days$dteday, y = smoothed), color = "red") +
xlab('Dates') +
ylab('Number of rentals')
print(p)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(expsmooth)
library(fpp)
library(smooth)
library("TTR") ## Teacher's recommendation
library(imputeTS)
#hours = read.csv("project/dataset/hour.csv")
#days = read.csv("project/dataset/day.csv")
hours = read.csv("./dataset/hour.csv")
days = read.csv("./dataset/day.csv")
head(hours)
# Converting datatype
days$dteday<-as.Date(days$dteday)
days$season<-as.factor(days$season)
days$weekday<-as.factor(days$weekday)
days$holiday<-as.factor(days$holiday)
sapply(days,class)
hours$dteday<-as.Date(dayhourss$dteday)
hours$season<-as.factor(hours$season)
hours$weekday<-as.factor(hours$weekday)
hours$holiday<-as.factor(hours$holiday)
## Mean and median temperature by season
# ----- How do the temperatures change across the seasons?
# ----- What are the mean and median temperatures?
aggregate(days$temp~days$season, FUN= function(x) c(mean = mean(x), median = median(x)))
boxplot(days$temp~days$season, xlab="Seasons", ylab="Temperature")
# ----- Is there a correlation between the temp/atemp/mean.temp.atemp and
# ----- the total count of bike rentals?
cor(days[, c("temp", "atemp", "cnt", "casual", "registered" )])
## Means per month
# ----- What are the mean temperature, humidity, windspeed and total rentals per months?
cbind(aggregate(days$temp~days$mnth + days$yr, FUN= mean),
aggregate(days$atemp~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$hum~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$windspeed~days$mnth + days$yr, FUN= mean)[3],
aggregate(days$cnt~days$mnth + days$yr, FUN= mean)[3])
## Correlation between temperature and bike rentals
# ----- Is temperature associated with bike rentals (registered vs. casual)?
cor(hours[c("temp", "casual", "registered")])
# ----- Plot the cnt vs dteday and examine its patterns and irregularities
plot(days$dteday, days$cnt, type="l")
?boxplot
smoothed = holt(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)))
# ----- Smooth your time series and compare with the origina
## Using library 'smooth'
es(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), h=18, holdout=TRUE, silent=FALSE)
# Using library TTR
smoothed = SMA(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), n=7)
p = ggplot() +
geom_line(data = days, aes(x = days$dteday, y = days$cnt), color = "lightblue") +
geom_line(data = days, aes(x = days$dteday, y = smoothed), color = "red") +
xlab('Dates') +
ylab('Number of rentals')
print(p)
#####################
### Decomposing the time series
#####################
smoothed = SMA(ts(days$cnt, start = min(days$dteday), end = max(days$dteday)), n=7)
## Remove missing values
# ----- transform cnt_ma into a time series with frequency 30 named count_ma
timeseries <- ts(smoothed[!is.na(smoothed)], frequency = 30)
plot(timeseries)
# ----- Use decompose() or stl() to examine and possibly remove components of the series
decomposed <- decompose(timeseries)
plot(decomposed)
## Remove the seasonal component
# ----- create a time series deseasonal_cnt by removing the seasonal component
decomposed$x-decomposed$season
#####################
### Stationarity
#####################
# ----- Is the serie count_ma stationary? If not, how to make stationary
# ----- (Use adf.test(), ACF, PACF plots )
?adf.test()
#####################
### Stationarity
#####################
# ----- Is the serie count_ma stationary? If not, how to make stationary
# ----- (Use adf.test(), ACF, PACF plots )
adf.test(count_ma)
count_ma <- timeseries
#####################
### Stationarity
#####################
# ----- Is the serie count_ma stationary? If not, how to make stationary
# ----- (Use adf.test(), ACF, PACF plots )
adf.test(count_ma)
?ACF
PACF
?PACF
#####################
### Stationarity
#####################
# ----- Is the serie count_ma stationary? If not, how to make stationary
# ----- (Use adf.test(), ACF, PACF plots )
adf.test(count_ma)
#####################
### Stationarity
#####################
# ----- Is the serie count_ma stationary? If not, how to make stationary
# ----- (Use adf.test(), ACF, PACF plots )
res_test <- adf.test(count_ma)
plot(res_test)
plot(Acf(count_ma))
ACF(count_ma)
?ACF
Acf(count_ma)
Pacf(count_ma)
layout(matrix(1:2, nrow=1))
Acf(count_ma)
Pacf(count_ma)
?Acf
count_ma
plot(cout_ma)
plot(count_ma)
dev.off()
plot(count_ma)
